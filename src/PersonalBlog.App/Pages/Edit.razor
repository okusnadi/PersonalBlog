@page "/Edit"
@page "/Edit/{id}"

@attribute [Authorize]
@using Markdig
@using Markdig.SyntaxHighlighting

    <div class="row">
        <div class="col-12">
            <h2></h2>
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <EditForm Model="model" OnValidSubmit="@OnSubmitAsync" Context="form">
                <DataAnnotationsValidator/>
                <ValidationSummary class="alert alert-danger"/>
                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <InputSelect @bind-Value="model.CategoryId" class="form-control">
                                <option value="">--Categories--</option>
                                @foreach (var item in _categories)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-8">
                            <InputText class="form-control" @bind-Value="model.Title" placeholder="@Language.Input_Post_Title_Placeholder" />
                        </div>
                        <div class="col-2">
                            <button type="submit" class="btn btn-primary">
                                @Language.Button_Submit
                            </button>
                            <button class="btn btn-link" @onclick="GoBack">
                                @Language.Button_Back
                            </button>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-6">
                            <InputTextArea class="form-control" @bind-Value="model.Content" @oninput="TransformMarkdown" placeholder="@Language.Input_Post_Content_Placeholder"  @attributes="@Attibutes"/>

                        </div>
                        <div class="col-6 border pt-1 pl-2 pr-2 bg-light" style="height:@height;overflow-y:scroll">
                            @(new MarkupString(marktext))
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>


@inject NavigationManager _navigationManager
@inject BlogService _blogService
@functions{
    private string _pageTitle;

    private string height = "600px";

    private string marktext;

    private IEnumerable<PostCategory> _categories;

    private Post model = new Post();



    IDictionary<string, object> Attibutes => new Dictionary<string, object>
    {
        ["style"] = $"height:{height}"
    };

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            model = await _blogService.FindAsync<Post>(Id);

            if (model == null)
            {
                _navigationManager.NavigateTo("/404");
                return;
            }

            marktext = Markdown.ToHtml(model.Content, Startup.Pipeline);

            _pageTitle = Language.Page_Edit;
        }
        else
        {
            _pageTitle = Language.Page_Create;
        }
        _categories = await _blogService.GetPostCategoriesAsync();
    }


    void TransformMarkdown(ChangeEventArgs e)
    {
        var value = e.Value.ToString();

        try
        {
            marktext = Markdown.ToHtml(value, Startup.Pipeline);
        }
        catch (Exception ex)
        {
            marktext =value;
        }
        this.StateHasChanged();
    }

    void GoBack()
    {
        _navigationManager.NavigateTo("/");
    }

    async Task OnSubmitAsync()
    {
        var rows = await _blogService.CreateAsync(model);
        GoBack();
    }
}