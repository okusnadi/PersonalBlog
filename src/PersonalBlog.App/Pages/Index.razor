@page "/"
@page "/Category/{CategoryName}"
@attribute [AllowAnonymous]

<section class="row mt-1 mb-3">
    <div class="col-10">
        <h2>
            @if (string.IsNullOrEmpty(CategoryName))
            {
                @Language.Page_Category_All
            }
            else
            {
                @CategoryName
            }
        </h2>
    </div>
    <div class="col-2 text-right">
        <AuthorizeView>
            <Authorized>
                <a href="/Edit" class="btn btn-success"><i class="fa fa-plus"/> @Language.Message_NewPost</a>
            </Authorized>
        </AuthorizeView>
    </div>
    <div class="col-12">
        @if (_posts != null)
        {
            @if (_posts.Any())
            {
                <div class="list-group mt-1">
                    @foreach (var item in _posts)
                    {
                    <a href="/Detail/@item.Id" class="list-group-item list-group-item-action">
                        <div class="d-flex w-100 justify-content-between">
                            <h4 class="mb-1">【@(item.Category.Name)】@(item.Title)
                            @if (item.IsTop)
                            {
                                <span class="badge badge-success">@Language.Field_Top</span>
                            }
                            </h4>
                            <small>@item.CreatedTime.ToString("yyyy/MM/dd HH:mm")</small>
                        </div>
                        <p class="mt-1 mb-1">
                            @if (item.Content.Length > 100)
                            {
                                @(new MarkupString(Markdown.ToHtml(item.Content.Substring(0,100), Startup.Pipeline)))
                            }
                            else
                            {
                                @(new MarkupString(Markdown.ToHtml(item.Content, Startup.Pipeline)));
                            }
                        </p>
                        <div class="small">
                            <div class="pull-left">
                                <i class="fa fa-eye" /> @item.ViewCount
                            </div>
                            <AuthorizeView>
                                <Authorized>
                                    <div class="pull-right">
                                        <a href="/Edit/@item.Id" title="@Language.Message_Edit"><i class="fa fa-pencil-square" /></a>
                                        &nbsp;
                                        <a href="javascript:;" title="@Language.Message_Delete" @onclick="@((e) => ShowModalAsync(e, item.Id))"><i class="fa fa-trash" /></a>
                                    </div>
                                </Authorized>
                            </AuthorizeView>
                        </div>
                    </a>
                    }
                </div>
            }
            else
            {
                <div class="text-muted text-center border-top pt-2">
                    <h3>@Language.Message_NoData</h3>
                </div>
            }
        }
        else
        {
            <div class="text-muted">Loading...</div>
        }
        </div>
</section>

<div class="modal fade" tabindex="-1" role="dialog" id="modal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">
                @Language.Message_ConfirmAction
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-info" data-dismiss="modal">@Language.Button_No</button>
                <button type="button" class="btn btn-primary" @onclick="@(e=>OnDeleteAsync(e))">@Language.Button_Yes</button>
            </div>
        </div>
    </div>
</div>

@inject BlogService _blogService
@inject IJSRuntime _js
@inject NavigationManager _nagigationManager
@functions{
    List<Post> _posts;

    string _deletingId;

    [Parameter]
    public string CategoryName { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _posts = await _blogService.GetPostsAsync(CategoryName);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        _posts = await _blogService.GetPostsAsync(CategoryName);
    }

    async Task OnDeleteAsync(MouseEventArgs e)
    {
        if (string.IsNullOrEmpty(_deletingId))
        {
            return;
        }

        try
        {
            var rows = await _blogService.DeleteAsync<Post>(_deletingId);
            if (rows == 0)
            {
                await _js.InvokeVoidAsync("alert", "Delete failed");
                return;
            }
        }catch(Exception ex)
        {

        }
        await OnAfterRenderAsync(true);
        this.StateHasChanged();
        _deletingId = string.Empty;
        await _js.InvokeVoidAsync("dialog.showModal", "#modal", "hide");
    }

    async Task ShowModalAsync(MouseEventArgs e, string id)
    {
        _deletingId = id;
        await _js.InvokeVoidAsync("dialog.showModal", "#modal", "show");
        StateHasChanged();
    }
}